/* 来自Google font的poppins字体，这是个好看的英文字体，可以通过link导入，这里是学视频里的用了import */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap');

:root {
    /* 颜色变量 */
    --color-primary: #7380ec;
    --color-danger: #ff7782;
    --color-success: #41f1b6;
    --color-warning: #ffbb55;
    --color-white: #fff;
    --color-info-dark: #7d8da1;
    --color-info-light: #dce1eb;
    --color-dark: #363949;
    --color-light: rgba(132, 139, 200, 0.18);
    --color-primary-variant: #111e88;
    --color-dark-variant: #677483;
    --color-background: #f6f6f9;
    /* 圆角变量 */
    --card-border-radius: 2rem;
    --border-radius-1: .4rem;
    --border-radius-2: .8rem;
    --border-radius-3: 1.2rem;
    /* 卡片内边距变量 */
    --card-padding: 1.8rem;
    --padding-1: 1.2rem;
    /* 阴影 */
    --box-shadow: 0 2rem 3rem var(--color-light);
}

/* ==============暗黑主题==================== */
.dark-theme-variables {
    --color-background: #181a1e;
    --color-white: #202528;
    --color-dark: #edeffd;
    --color-dark-variant: #a3bdcc;
    --color-light: #rgba(0,0,0,.4);
    --box-shadow: 0 2rem 3rem var(--color-light);
}

/* ===============初始化=============== */
* {
    margin: 0;
    padding: 0;
    outline: 0;
    appearance: none;
    border: 0;
    text-decoration: none;
    list-style: none;
    box-sizing: border-box;
}

html {
    font-size: 14px;
}

body {
    width: 100vw;
    height: 100vh;
    font-family: poppins, sans-serif;
    font-size: .88rem;
    background-color: var(--color-background);
    /* 控制用户能否选择文本 */
    user-select: none;
    /* 水平方向超出会被截断且不显示滚动条 */
    overflow-x: hidden;
    color: var(--color-dark);
}

.container {
    display: grid;
    width: 96%;
    margin: 0 auto;
    /* row-gap 和 column-gap 的简写形式 */
    gap: 1.8rem;
    /* 超简单三列布局，中间为auto */
    grid-template-columns: 14rem auto 23rem;
}

a {
    color: var(--color-dark);
}

img {
    display: block;
    width: 100%;
}

h1 {
    font-weight: 800;
    font-size: 1.8rem;
}

h2 {
    font-size: 1.4rem;
}

h3 {
    font-size: .87rem;
}

h4 {
    font-size: .8rem;
}

h5 {
    font-size: .77rem;
}

small {
    font-size: .75rem;
}

.profile-photo {
    width: 2.8rem;
    height: 2.8rem;
    /* 以下两句制作圆形头像 */
    border-radius: 50%;
    overflow: hidden;
}

.text-muted {
    color: var(--color-info-dark);
}

p {
    color: var(--color-dark-variant);
}

b {
    color: var(--color-dark);
}

.primary {
    color: var(--color-primary);
}

.danger {
    color: var(--color-danger);
}

.success {
    color: var(--color-success);
}

.warning {
    color: var(--color-warning);
}

.primary {
    color: var(--color-primary);
}

/* =============aside================ */
aside {
    height: 100vh;
}

aside .top {
    /* 经测试以下都不要，在top里只有一个logo，两个盒子等大小，不需要以下布局 */
    /* display: flex; */
    /* 在flex里是侧轴居中 */
    /* align-items: center; */
    /* 首尾贴着父盒子，其他均匀分布 */
    /* justify-content: space-between; */
    margin-top: 1.4rem;
}

aside .logo {
    /* 最简单的左右布局，且分出间隙 */
    display: flex;
    gap: 0.8rem;
}

aside .logo img {
    width: 2rem;
    height: 2rem;
}

aside .close {
    display: none;
}

/* =============sidebar============= */
aside .sidebar {
    display: flex;
    flex-direction: column;
    height: 86vh;
    position: relative;
    top: 3rem;
}

aside h3 {
    font-weight: 500;
}

aside .sidebar a {
    display: flex;
    color: var(--color-info-dark);
    margin-left: 2rem;
    gap: 1rem;
    align-items: center;
    /* 又是一句不必要的样式 */
    /* position: relative; */
    height: 3.7rem;
    /* 多余的，实际hover会改的是里面span的margin，也就只要给span加上过渡就行 */
    /* transition: all 300ms ease; */
}

aside .sidebar a span {
    font-size: 1.6rem;
    /* ease是慢快慢 */
    transition: all 300ms ease;
}

aside .sidebar a:last-child {
    position: absolute;
    bottom: 2rem;
    width: 100%;
}

aside .sidebar .message-count {
    background-color: var(--color-danger);
    color: var(--color-white);
    padding: 2px 10px;
    font-size: 11px;
    border-radius: var(--border-radius-1);
}

/* ------------sidebar-active-hover----------- */
aside .sidebar a.active {
    background-color: var(--color-light);
    color: var(--color-primary);
    margin-left: 0;
}

aside .sidebar a.active::before {
    content: '';
    width: 6px;
    height: 100%;
    background-color: var(--color-primary);
}

aside .sidebar a.active span {
    color: var(--color-primary);
    /* 之所以用1rem来减，是因为有gap占了1rem，而6px是before的宽度，所以这里实际是2rem-1rem-6px */
    margin-left: calc(1rem - 6px);
}

aside .sidebar a:hover {
    color: var(--color-primary);
}

/* 这里的not是后来加的，视频里没有，为了防止徽标26和导航文字之间也拉开距离 */
aside .sidebar a:hover span:not(.message-count) {
    margin-left: 1rem;
}

/* ================MAIN================= */
main {
    margin-top: 1.4rem;
}

main .date {
    /* 使用行内块是为了背景宽度，这样就不用去主动设置div的宽了 */
    /* 这几行都是为了给日期input设置一个好看的 背景框 */
    display: inline-block;
    background-color: var(--color-light);
    border-radius: var(--border-radius-1);
    margin-top: 1rem;
    padding: .5rem 1.6rem;
}

main .date input[type="date"] {
    /* 默认有白色背景，要去除，例如谷歌浏览器的默认是field */
    background: transparent;
    /* 这里的颜色变量接近默认的黑色，主要为了统一 */
    color: var(--color-dark);
}

main .insights {
    display: grid;
    /* 下面一行的值等于1fr 1fr 1fr */
    grid-template-columns: repeat(3, 1fr);
    /* gap可以用在flex，grid，column这三者容器上，其中column列布局适用于报刊类排版，即列之间用竖线或空白隔开 */
    /* 还有可以很容易想到的就是用竖线隔开的导航栏 */
    gap: 1.6rem;
}

main .insights>div {
    /* 这个卡片样式挺好看的，以后可以拿来我自己用 */
    background-color: var(--color-white);
    padding: var(--card-padding);
    border-radius: var(--card-border-radius);
    margin-top: 1rem;
    box-shadow: var(--box-shadow);
    transition: all 300ms ease;
}

main .insights>div:hover {
    box-shadow: none;
}

main .insights>div span {
    /* 这个可爱的圆形图标也好看 */
    background-color: var(--color-primary);
    padding: .5rem;
    border-radius: 50%;
    color: var(--color-white);
    font-size: 2rem;
}

main .insights>div.expenses span {
    background-color: var(--color-danger);
}

main .insights>div.income span {
    background-color: var(--color-success);
}

main .insights>div .middle {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

main .insights h3 {
    margin: 1rem 0 0.6rem;
    font-size: 1rem;
}

main .insights .progress {
    position: relative;
    width: 92px;
    height: 92px;
    border-radius: 50%;
}

main .insights svg {
    width: 7rem;
    height: 7rem;
}

main .insights svg circle {
    transform: translate(5px, 5px);
    /* 这些东西也可以作为标签内属性写 */
    /* fill是填充（颜色）类似于background-color */
    fill: none;
    /* stroke是边框（颜色）类似于border */
    stroke: var(--color-primary);
    /* 边框宽度 */
    stroke-width: 14;
    /* 边框末端形状，默认值butt直边结束，square也是直边但是会超出一部分范围（由stroke-width控制），round表示圆角（半径也由stroke-width控制） */
    stroke-linecap: round;
    /* 边框虚线 由circle的半径36可知圆的周长226左右*/
    /* stroke-dasharray: 110; 这里的这一句注释，每个circle单独设置*/
    /* 边框虚线开始位置 d = s - | 'stroke-dashoffset' | % s
    其中d:偏移量  s:线段总长度  'stroke-dashoffset':参数值 可知偏移量不会超过总长
    圆形的起点位置在园的右侧端点*/
    /* stroke-dashoffset: 92; 这里的这一句注释，每个circle单独设置*/
}

main .insights .sales svg circle {
    stroke-dashoffset: -30;
    stroke-dasharray: 200;
}

main .insights .expenses svg circle {
    stroke-dashoffset: 20;
    stroke-dasharray: 80;
}

main .insights .income svg circle {
    stroke-dashoffset: 35;
    stroke-dasharray: 110;
}

main .insights .progress .number {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    /* 上面五行只为了让number和progress等大且重叠 */
    /* 然后下面这句把number里的p标签居中，flex-basis: auto由内部的content决定宽度，所以p不再有块级特征 */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* ==============Recent Orders================= */
main .recent-orders {
    margin-top: 2rem;
}

main .recent-orders h2 {
    margin-bottom: .8rem;
}

main .recent-orders table {
    background-color: var(--color-white);
    width: 100%;
    border-radius: var(--card-border-radius);
    padding: var(--card-padding);
    text-align: center;
    box-shadow: var(--box-shadow);
    transition: all 300ms ease;
}

main .recent-orders table:hover {
    box-shadow: none;
}

main table tbody td {
    height: 2.8rem;
    border-bottom: 1px solid var(--color-light);
    color: var(--color-dark-variant);
}

main table tbody tr:last-child td {
    border: none;
}

/* =================right============== */
.right {
    margin-top: 1.4rem;
}

.right .top {
    /* 相当于最早学习的右浮动布局办法，但是要方便多,不用多包一层盒子,不用设置多个margin */
    display: flex;
    justify-content: end;
    gap: 2rem;
}


.right .top button {
    display: none;
}

.right .theme-toggler {
    background-color: var(--color-light);
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 1.6rem;
    width: 4.2rem;
    cursor: pointer;
    border-radius: var(--border-radius-1);
}

.right .theme-toggler span {
    /* 这里的关键是把字体设置了1.2rem，使得字体偏小，如果没设置会导致flex那些不会生效 */
    /* 我头一回知道标签里的文字可以这样居中,我还以为文字外面至少要包一层标签。。。 */
    font-size: 1.2rem;
    width: 50%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.right .theme-toggler span.active {
    background-color: var(--color-primary);
    color: white;
    border-radius: var(--border-radius-1);
}

.right .top .profile {
    /* 没有设置父盒子宽度但是设置了间隔的两列办法get */
    /* column-count: 2;这个办法不行，gap会在每个元素右侧产生一个间隔（相当于margin-right)，而flex只会在元素之间产生间隔 */
    display: flex;
    gap: 2rem;
    text-align: right;
}

/* ===============right updates========== */
.right .recent-updates {
    margin-top: 1rem;
}

.right .recent-updates h2 {
    margin-bottom: .8rem;
}

.right .recent-updates .updates {
    background-color: var(--color-white);
    padding: var(--card-padding);
    border-radius: var(--card-border-radius);
    box-shadow: var(--box-shadow);
    transition: all 300ms ease;
}

.right .recent-updates .updates:hover {
    box-shadow: none;
}

.right .recent-updates .updates .update {
    /* 这里也可以用flex实现，把第二个子item设置flex：1即可 */
    /* 但是明显使用grid省一点 */
    display: grid;
    grid-template-columns: 2.6rem auto;
    gap: 1rem;
    margin-bottom: 1rem;
}

/* ===========sales analytics================ */
.right .sales-analytics {
    margin-top: 2rem;
}

.right .sales-analytics h2 {
    margin-bottom: .8rem;
}

.right .sales-analytics .item {
    background-color: var(--color-white);
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: .7rem;
    padding: 1.4rem var(--card-padding);
    border-radius: var(--border-radius-3);
    box-shadow: var(--box-shadow);
    transition: all 300ms ease;
}

.right .sales-analytics .item:hover {
    box-shadow: none;
}

.right .sales-analytics .item .right {
    /* 这个地方的类名不好，有两个right，导致了多余的样式，原本是不需要margin：0的 */
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin: 0;
    /* 这里的100%也可以用flex：1 */
    width: 100%;
}

.right .sales-analytics .item .icon {
    padding: .6rem;
    color: var(--color-white);
    border-radius: 50%;
    background-color: var(--color-primary);
    /* 这个地方实在看不懂，按303行的来看，不需要额外包一个盒子也可以实现，但是这里多用了一个div，而且不使用flex会导致拉伸。。。 */
    /* 发现了，不包一个盒子会导致高度从80到81.2，是有区别的 */
    /* 测试了一下，浏览器默认的line-height为normal，可能是1.2，这里设置行高为1可以把拉伸缩小一点，但依然不够，设置为0才可以 */
    line-height: 0;
    /* 如果把display设置为flex或者grid，也能正确缩放，会把宽高都固定为24，而不是高度变高到28或者25.6 */
    /* 另外，网上搜索的时候发现不同字体，同样的font-size也有不同的高度 */
    display: flex;
}

.right .sales-analytics .item.offline icon {
    background-color: var(--color-danger);
}

.right .sales-analytics .item.customers icon {
    background-color: var(--color-success);
}

.right .sales-analytics .add-product {
    background-color: transparent;
    border: 2px dashed var(--color-primary);
    color: var(--color-primary);
    display: flex;
    align-items: center;
    justify-content: center;
}

.right .sales-analytics .add-product:hover{
    background-color: var(--color-primary);
    color: white;
}

.right .sales-analytics .add-product div {
    display: flex;
    align-items: center;
    gap: 0.6rem;
}

.right .sales-analytics .add-product div h3 {
    font-weight: 600;
}

/* ===========媒体查询-平板电脑或者小号的笔记本============ */
@media screen and (max-width: 1200px) {
    .container {
        width: 94%;
        grid-template-columns: 7rem auto 23rem;
    }

    aside .logo h2 {
        display: none;
    }

    aside .sidebar h3 {
        display: none;
    }

    aside .sedebar a {
        width: 5.6rem;
    }

    aside .sidebar a:last-child {
        position: relative;
        margin-top: 1.8rem;
    }

    main .insights {
        grid-template-columns: 1fr;
        gap: 0;
    }

    main .recent-orders {
        /* width: 94%; */
        /* 为什么这里要用绝对定位，准确来说，这里只要一句绝对定位，其他的都是多余的，已经实践证明了，所以都注释掉 */
        /* 测试证明，不使用绝对定位脱离文档流的时候，main会被这个盒子撑开宽度 */
        /* 从而把right那一部分挤开到屏幕外面去，因为有overflowx：hidden，甚至无法通过滚动条找到right那一部分 */
        /* 发现一个更奇葩的事实，这里使用绝对定位的时候，父级定位盒子是html。。。。，即便如此，这里也不能用fixed */
        /* 因为fixed绑定的是视口，感觉自己快忘记这回事了 */
        /* 视频里的这个家伙是先居中，然后通过margin硬调整过来的。。。。 */
        position: absolute;
        /* left: 50%;
        transform: translateX(-50%);
        margin: 2rem 0 0 8.8rem; */
    }

    main table thead tr th:last-child,
    main table thead tr th:first-child,
    main table tbody tr th:first-child,
    main table tbody tr th:first-child {
        display: none;
    }

    main .recent-orders table {
        width: 83vw;
    }
}

/* ===========媒体查询-手机或者小号的平板电脑============ */
@media screen and (max-width: 765px) {
    .container {
        width: 100%;
        grid-template-columns: 1fr;
    }

    aside {
        /* display: none; */
        position: fixed;
        left: -100%;
        background-color: var(--color-white);
        width: 18rem;
        z-index: 3;
        box-shadow: 1rem 3rem 4 rem var(--color-light);
        height: 100vh;
        padding-right: var(--card-padding);
        /* forwards（动画结束后动画停留在结束状态）这里通过forwards来实现弹出 */
        /* animation: showMenu 400ms ease forwards; */
        transition: all 400ms ease;
    }

    /* @keyframes showMenu{
        to {
            left: 0;
        }
    } */

    aside .logo {
        margin-left: 1rem;
    }

    aside .logo h2 {
        /* 这里只是为了取消none，也可以用block */
        display: inline;
    }

    aside .sidebar h3 {
        display: inline;
    }

    aside .sidebar a {
        /* a会被里面的h3撑开，所以这里的100%也是多此一举 */
        width: 100%;
        height: 3.4rem;
    }

    aside .sidebar a:last-child {
        position: absolute;
        bottom: 5rem;
    }

    aside .close {
        display: inline-block;
        cursor: pointer;
    }

    main {
        margin-top: 8rem;
        padding: 0 1rem;
    }

    main .recent-orders {
        width: 100%;
        /* 回归普通文档流的位置，因为现在是grid只有一列的情况 */
        /* 这里必须要保留grid，尚且不知道是为什么 */
        position: relative;
        margin: 3rem 0 0 0;
    }

    main .recent-orders table {
        width: 100%;
        margin: 0;
    }

    .right {
        width: 94%;
        margin: 0 auto 4rem;
    }

    .right .top {
        position: fixed;
        top: 0;
        left: 0;
        align-items: center;
        padding: 0 .8rem;
        height: 4.6rem;
        background-color: var(--color-white);
        width: 100%;
        margin: 0;
        z-index: 2;
        box-shadow: 0 1rem 1rem var(--color-light);
    }

    .right .top .theme-toggler {
        width: 4.4rem;
        position: absolute;
        left: 66%;
    }

    .right .profile .info {
        display: none;
    }

    .right .top button {
        display: inline-block;
        background: transparent;
        cursor: pointer;
        color: var(--color-dark);
        position: absolute;
        left: 1rem;
    }

    .right .top button span {
        font-size: 2rem;
    }
}